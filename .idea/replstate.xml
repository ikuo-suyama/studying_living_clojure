<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1438304813201">{:repl-history {:ide [], :local [&quot;(let [n 10]\n  (future (dotimes [_ n] (eat-from-right-hand-sync)))\n  (future (dotimes [_ n] (eat-from-right-hand-sync)))\n  (future (dotimes [_ n] (eat-from-right-hand-sync))))&quot; &quot;(defn eat-from-right-hand-sync []\n  (dosync (when (pos? @right-hand-bites)\n    (alter right-hand-bites dec)\n    (alter alice-height #(+ % 24)))))&quot; &quot;(def alice-height (ref 3))&quot; &quot;(def right-hand-bites (ref 10))&quot; &quot;(let [n 3]\n  (future (dotimes [_ n] (eat-from-right-hand-sync)))\n  (future (dotimes [_ n] (eat-from-right-hand-sync)))\n  (future (dotimes [_ n] (eat-from-right-hand-sync))))&quot; &quot;@right-hand-bites&quot; &quot;@who-agent&quot; &quot;(def who-agent (agent :caterpillar))&quot; &quot;(defn chnage [state]\n  (case state\n    :caterpillar :chysalis\n    :chysalis :butterfly\n    :butterfly :deadbody))&quot; &quot;(send-off who-agent change)&quot; &quot;(defn change-error [state]\n  (throw (Exception. \&quot;Error!!\&quot;)))&quot; &quot;(agent-errors who-agent)&quot; &quot;(restart-agent who-agent)&quot; &quot;(restart-agent who-agent :chatapiller)&quot; &quot;(set-error-handler! who-agent fn [a ex]\n                    (println \&quot;error \&quot; ex \&quot; value is @a\&quot;))&quot; &quot;(set-error-mode! who-agent :continue)&quot; &quot;(set-error-handler! who-agent (fn [a ex]\n                                (println \&quot;error \&quot; ex \&quot; value is @a\&quot;)))&quot; &quot;(send who-agent change-error)&quot; &quot;(send who-agent change)&quot; &quot;(. \&quot;caterpillar\&quot; toUpperCase)&quot; &quot;(.toUpperCase \&quot;caterpillar\&quot;)&quot; &quot;(.indexOf \&quot;chaterpillar\&quot; \&quot;pillar\&quot;)&quot; &quot;(. \&quot;chaterpillar\&quot; indexOf \&quot;pillar\&quot;)&quot; &quot;(String. \&quot;Hi\&quot;)&quot; &quot;(java.net.Inet4Address/getByName \&quot;localhost\&quot;)&quot; &quot;(def sb (doto (StringBuffer. \&quot;who\&quot;)\n          (.append \&quot;are\&quot;)\n          (.append \&quot;you\&quot;)))&quot; &quot;(.toString sb)&quot; &quot;caterpillar&quot; &quot;(who-are-you \&quot;caterpillar\&quot;)&quot; &quot;(who-are-you :caterpillar)&quot; &quot;(who-are-you 1234)&quot; &quot;(eat-mushroom 5)&quot; &quot;(eat-mushroom 2)&quot; &quot;(defmulti eat-mushroom (fn [height]\n                         (if (&lt; height 3)\n                           :grow\n                           :shrink)))&quot; &quot;(eat-mushroom2 :grow)&quot; &quot;(eat-mushroom2 \&quot;Mushroom\&quot;)&quot; &quot;(defrecord Mushroom [color height])&quot; &quot;(def regular-mushroom (Mushroom. \&quot;white and blue\&quot; \&quot;2 inches\&quot;))&quot; &quot;(class regular-mushroom)&quot; &quot;(print regular-mushroom)&quot; &quot;(.-color regular-mushroom)&quot; &quot;(defrecord WonderlandMushroom [color size]\n  Edible\n  (right-side [this])\n  (str \&quot;The \&quot; color \&quot; bite makes yuo grow bigger\&quot;)\n  (str \&quot;The \&quot; color \&quot;bite makes you grow smaller\&quot;))&quot; &quot;(defrecord WonderlandMushroom [color size]\n  Edible\n  (right-side [this]\n    (str \&quot;The \&quot; color \&quot; bite makes yuo grow bigger\&quot;))\n\n  (str \&quot;The \&quot; color \&quot;bite makes you grow smaller\&quot;))&quot; &quot;(defrecord WonderlandMushroom [color size]\n  Edible\n  (right-side [this]\n    (str \&quot;The \&quot; color \&quot; bite makes yuo grow bigger\&quot;)))&quot; &quot;(defprotocol Edible\n  (right-side [this])\n  (left-side [this]))&quot; &quot;(defrecord WonderlandMushroom [color size]\n  Edible\n  )&quot; &quot;(defrecord WonderlandMushroom [color size]\n  Edible\n  (right-side [this]\n    (str \&quot;The \&quot; color \&quot; bite makes yuo grow bigger\&quot;))\n  (left-side [this]\n    (str \&quot;The \&quot; color \&quot; bite makes yuo grow bigger\&quot;)))&quot; &quot;(def wonder (WonderlandMushroom. [\&quot;white\&quot; \&quot;quite bigger\&quot;]))&quot; &quot;(def wonder (WonderlandMushroom. \&quot;white\&quot; \&quot;quite bigger\&quot;))&quot; &quot;(wonder right-side)&quot; &quot;(wonder .right_side)&quot; &quot;(. wonder right-side)&quot; &quot;(.right_side wonder)&quot; &quot;(.left_side wonder)&quot; &quot;(left_side wonder)&quot; &quot;(.left-side wonder)&quot; &quot;(left-side wonder)&quot; &quot;(left-side regular)&quot; &quot;(bite-right-side-by-type [:type \&quot;wondermashroom\&quot;])&quot; &quot;(bite-right-side-by-type {:type \&quot;wondermashroom\&quot;})&quot; &quot;(-&gt; (+ 1) (+ 1))&quot; &quot;(-&gt; 1 (+ 1))&quot; &quot;(macroexpand '(-&gt; \&quot;up\&quot; toUpperCase toLowerCase))&quot; &quot;(-&gt; \&quot;up\&quot; toUpperCase toLowerCase)&quot; &quot;(.toLowerCase \&quot;up\&quot;)&quot; &quot;(.toUpperCase (.toLowerCase \&quot;up\&quot;))&quot; &quot;(doto \&quot;up\&quot;\n  (.toLowerCase)\n  (.toUpperCase))&quot; &quot;(doto \&quot;up\&quot;\n  (.toLowerCase)\n  (.toUpperCase)\n  (print))&quot; &quot;(doto \&quot;up\&quot;\n  (.toUpperCase)\n  (.toLowerCase))&quot; &quot;(doto \&quot;up\&quot;\n  (.toUpperCase))&quot; &quot;(doto \&quot;up\&quot;\n  (.toUpperCase)\n  (.substring 0 1))&quot; &quot;(print (doto \&quot;up\&quot;\n  (.toUpperCase)\n  (.substring 0 1)))&quot; &quot;(-&gt; \&quot;up\&quot;\n    .toUpperCase\n    .toLowerCase)&quot; &quot;(macroexpand '(-&gt; \&quot;up\&quot; .toUpperCase .toLowerCase))&quot; &quot;(macroexpand '(-&gt; 1 (+ 1)))&quot; &quot;(doto \&quot;a b c d\&quot;\n  .toUpperCase\n  .replace \&quot;A\&quot; \&quot;E\&quot;\n  first)&quot; &quot;(doto \&quot;a b c d\&quot;\n  .toUpperCase\n  .replace \&quot;A\&quot; \&quot;E\&quot;\n  .split\n  first)&quot; &quot;camel-snake-kebab.core :as csk&quot; &quot;(csk/-&gt;snake_case \&quot;hey boy!\&quot;)&quot; &quot;(ns chapter-6.samples\n  (:require [clojure.core.async :as async]))&quot; &quot;(def tea-channel (async/chan))&quot; &quot;(async/&gt;!! tea-channel)&quot; &quot;&gt;&quot; &quot;(async/&lt;!! tea-channel :cup-of-tea)&quot; &quot;&quot; &quot;(async/&lt;!! tea-channel)&quot; &quot;(let [tea-channel2 (async/chan)]\n  (async/go (async/&gt;! tea-channel :cup-of-tea))\n  (async/go (println \&quot;Thanks for the \&quot;(async/&lt;&gt;&gt;! tea-channel :cup-of-tea))))&quot; &quot;(let [tea-channel2 (async/chan)]\n  (async/go (async/&gt;! tea-channel :cup-of-tea))\n  (async/go (println \&quot;Thanks for the \&quot;(async/&lt;! tea-channel :cup-of-tea))))&quot; &quot;(let [tea-channel2 (async/chan)]\n  (async/go (async/&gt;! tea-channel :cup-of-tea))\n  (async/go (println \&quot;Thanks for the \&quot; (async/&lt;! tea-channel :cup-of-tea))))&quot; &quot;(let [tea-channel2 (async/chan)]\n  (async/go (async/&gt;! tea-channel :cup-of-tea))\n  (async/go (println \&quot;Thanks for the \&quot; (async/&lt;! tea-channel))))&quot; &quot;(async/close! tea-channel)&quot; &quot;(async/go-loop []\n  (orint ln \&quot;thanks for the \&quot; (async/&lt;! tea-channel))\n  (recur))&quot; &quot;(async/go-loop []\n  (orintln \&quot;thanks for the \&quot; (async/&lt;! tea-channel))\n  (recur))&quot; &quot;(async/go-loop []\n  (println \&quot;thanks for the \&quot; (async/&lt;! tea-channel))\n  (recur))&quot; &quot;(async/go-loop []\n  (if !nil? [let tea (async/&lt;! tea-channel)]\n            (println \&quot;thanks for the \&quot; (async/&lt;! tea-channel))\n            )\n  (recur))&quot; &quot;(async/go-loop []\n  (if (!nil? [let tea (async/&lt;! tea-channel)])\n            (println \&quot;thanks for the \&quot; (async/&lt;! tea-channel))\n            )\n  (recur))&quot; &quot;(async/go-loop []\n  (if-let [let tea (async/&lt;! tea-channel)]\n    (println \&quot;thanks for the \&quot; (async/&lt;! tea-channel))\n    )\n  (recur))&quot; &quot;(async/go-loop []\n  (if-let [let tea (async/&lt;! tea-channel)]\n    (println \&quot;thanks for the \&quot; tea)\n    )\n  (recur))&quot; &quot;(async/go-loop []\n  (if-let [tea (async/&lt;! tea-channel)]\n    (println \&quot;thanks for the \&quot; tea)\n    )\n  (recur))&quot; &quot;(def tea-channel (async/chan 10))&quot; &quot;(async/&gt;!! tea-channel :cup-of-tea)&quot;], :remote []}}</component>
</project>