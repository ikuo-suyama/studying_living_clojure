<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1438216920011">{:repl-history {:ide [], :local [&quot;run-test&quot; &quot;run-testts&quot; &quot;run-test s&quot; &quot;run-tests&quot; &quot;(run-tests)&quot; &quot;(run-tests\n  )&quot; &quot;(deftest a-test\n  (testing \&quot;FIXME, I fail.\&quot;\n    (is (= 1 1))))&quot; &quot;(deftest a-test\n  (testing \&quot;sample-function return 'test'\&quot;\n    (is (= (sample-function) \&quot;test\&quot;))))&quot; &quot;(test-filtered [1 2 3 4])&quot; &quot;(deftest test-a-function\n  (testing \&quot;the function should return filtered value\&quot;\n    (is (= 1 1))))&quot; &quot;(defn foo [] (\&quot;Hello\&quot;))&quot; &quot;(defn bar [] ((str (foo) \&quot; World\&quot;)))&quot; &quot;(defn bar [] ((str foo \&quot; World\&quot;)))&quot; &quot;(bar)&quot; &quot;(defn- foo [] \&quot;Hello\&quot;)&quot; &quot;(defn bar [] (str (foo) \&quot; World\&quot;))&quot; &quot;(ns test-another-namespace)&quot; &quot;(test-private-func/bar)&quot; &quot;(test-private-func/foo)&quot; &quot;(who-atom)&quot; &quot;(@who-atom)&quot; &quot;(print @who-atom)&quot; &quot;(print who-atom)&quot; &quot;@who-atom&quot; &quot;(reset! who-atom :chrysalis)&quot; &quot;(def who-atom (atom :caterpillar))&quot; &quot;(swap! who-atom change)&quot; &quot;(def count (atom 0))&quot; &quot;(dotime [_ 5] (swap! counter inc))&quot; &quot;dotimes&quot; &quot;(dotimes [_ 5] (swap! counter inc))&quot; &quot;@counter&quot; &quot;(def counter (atom 0))&quot; &quot;(let [n 10]\n  (future (dotimes [_ n] counter inc-print))\n  (future (dotimes [_ n] counter inc-print))\n  (future (dotimes [_ n] counter inc-print))\n  )&quot; &quot;(defn inc-print\n  [val]\n  (print val)\n  (inc val))&quot; &quot;(defn inc-print\n  [val]\n  (println val)\n  (inc val))&quot; &quot;(let [n 10]\n  (future (dotimes [_ n] (swap! counter inc-print)))\n  (future (dotimes [_ n] (swap! counter inc-print)))\n  (future (dotimes [_ n] {(swap! counter inc-print)}))\n  )&quot; &quot;(let [n 10]\n  (future (dotimes [_ n] (swap! counter inc-print)))\n  (future (dotimes [_ n] (swap! counter inc-print)))\n  (future (dotimes [_ n] (swap! counter inc-print)))\n  )&quot; &quot;(defn eat-from-right-hand []\n  (when (pos? @right-hand-bites)\n    (alter right-hand-bites dec)\n    (alter alice-height #(+ % 24))))&quot; &quot;(eat-from-right-hand)&quot; &quot;(dosync (eat-from-right-hand))&quot; &quot;(let [n 10]\n  (future (dotimes [_ n] (eat-from-right-hand)))\n  (future (dotimes [_ n] (eat-from-right-hand)))\n  (future (dotimes [_ n] (eat-from-right-hand))))&quot; &quot;(let [n 10]\n  (future (dotimes [_ n] (eat-from-right-hand-sync)))\n  (future (dotimes [_ n] (eat-from-right-hand-sync)))\n  (future (dotimes [_ n] (eat-from-right-hand-sync))))&quot; &quot;(defn eat-from-right-hand-sync []\n  (dosync (when (pos? @right-hand-bites)\n    (alter right-hand-bites dec)\n    (alter alice-height #(+ % 24)))))&quot; &quot;(def alice-height (ref 3))&quot; &quot;(def right-hand-bites (ref 10))&quot; &quot;(let [n 3]\n  (future (dotimes [_ n] (eat-from-right-hand-sync)))\n  (future (dotimes [_ n] (eat-from-right-hand-sync)))\n  (future (dotimes [_ n] (eat-from-right-hand-sync))))&quot; &quot;@right-hand-bites&quot; &quot;@who-agent&quot; &quot;&quot; &quot;(def who-agent (agent :caterpillar))&quot; &quot;(defn chnage [state]\n  (case state\n    :caterpillar :chysalis\n    :chysalis :butterfly\n    :butterfly :deadbody))&quot; &quot;(send-off who-agent change)&quot; &quot;(defn change-error [state]\n  (throw (Exception. \&quot;Error!!\&quot;)))&quot; &quot;(agent-errors who-agent)&quot; &quot;(restart-agent who-agent)&quot; &quot;(restart-agent who-agent :chatapiller)&quot; &quot;(set-error-handler! who-agent fn [a ex]\n                    (println \&quot;error \&quot; ex \&quot; value is @a\&quot;))&quot; &quot;(set-error-mode! who-agent :continue)&quot; &quot;(set-error-handler! who-agent (fn [a ex]\n                                (println \&quot;error \&quot; ex \&quot; value is @a\&quot;)))&quot; &quot;(send who-agent change-error)&quot; &quot;(send who-agent change)&quot; &quot;(. \&quot;caterpillar\&quot; toUpperCase)&quot; &quot;(.toUpperCase \&quot;caterpillar\&quot;)&quot; &quot;(.indexOf \&quot;chaterpillar\&quot; \&quot;pillar\&quot;)&quot; &quot;(. \&quot;chaterpillar\&quot; indexOf \&quot;pillar\&quot;)&quot; &quot;(String. \&quot;Hi\&quot;)&quot; &quot;(java.net.Inet4Address/getByName \&quot;localhost\&quot;)&quot; &quot;(def sb (doto (StringBuffer. \&quot;who\&quot;)\n          (.append \&quot;are\&quot;)\n          (.append \&quot;you\&quot;)))&quot; &quot;(.toString sb)&quot; &quot;caterpillar&quot; &quot;(who-are-you \&quot;caterpillar\&quot;)&quot; &quot;(who-are-you :caterpillar)&quot; &quot;(who-are-you 1234)&quot; &quot;(eat-mushroom 5)&quot; &quot;(eat-mushroom 2)&quot; &quot;(defmulti eat-mushroom (fn [height]\n                         (if (&lt; height 3)\n                           :grow\n                           :shrink)))&quot; &quot;(eat-mushroom2 :grow)&quot; &quot;(eat-mushroom2 \&quot;Mushroom\&quot;)&quot; &quot;(defrecord Mushroom [color height])&quot; &quot;(def regular-mushroom (Mushroom. \&quot;white and blue\&quot; \&quot;2 inches\&quot;))&quot; &quot;(class regular-mushroom)&quot; &quot;(print regular-mushroom)&quot; &quot;(.-color regular-mushroom)&quot; &quot;(defrecord WonderlandMushroom [color size]\n  Edible\n  (right-side [this])\n  (str \&quot;The \&quot; color \&quot; bite makes yuo grow bigger\&quot;)\n  (str \&quot;The \&quot; color \&quot;bite makes you grow smaller\&quot;))&quot; &quot;(defrecord WonderlandMushroom [color size]\n  Edible\n  (right-side [this]\n    (str \&quot;The \&quot; color \&quot; bite makes yuo grow bigger\&quot;))\n\n  (str \&quot;The \&quot; color \&quot;bite makes you grow smaller\&quot;))&quot; &quot;(defrecord WonderlandMushroom [color size]\n  Edible\n  (right-side [this]\n    (str \&quot;The \&quot; color \&quot; bite makes yuo grow bigger\&quot;)))&quot; &quot;(defprotocol Edible\n  (right-side [this])\n  (left-side [this]))&quot; &quot;(defrecord WonderlandMushroom [color size]\n  Edible\n  )&quot; &quot;(defrecord WonderlandMushroom [color size]\n  Edible\n  (right-side [this]\n    (str \&quot;The \&quot; color \&quot; bite makes yuo grow bigger\&quot;))\n  (left-side [this]\n    (str \&quot;The \&quot; color \&quot; bite makes yuo grow bigger\&quot;)))&quot; &quot;(def wonder (WonderlandMushroom. [\&quot;white\&quot; \&quot;quite bigger\&quot;]))&quot; &quot;(def wonder (WonderlandMushroom. \&quot;white\&quot; \&quot;quite bigger\&quot;))&quot; &quot;(wonder right-side)&quot; &quot;(wonder .right_side)&quot; &quot;(. wonder right-side)&quot; &quot;(.right_side wonder)&quot; &quot;(.left_side wonder)&quot; &quot;(left_side wonder)&quot; &quot;(.left-side wonder)&quot; &quot;(left-side wonder)&quot; &quot;(left-side regular)&quot;], :remote []}}</component>
</project>